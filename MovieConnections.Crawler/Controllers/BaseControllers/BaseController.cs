using System;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using MovieConnections.Core.Services;
using MovieConnections.Data.Entities.SupplementaryModels;
using MovieConnections.Data.Models;
using MovieConnections.Framework.Models;

namespace MovieConnections.Crawler.Controllers.BaseControllers {
    public class BaseController : Controller {
        protected override void OnActionExecuting(ActionExecutingContext filterContext) {
            var isPost = filterContext.RequestContext.HttpContext.Request.HttpMethod.ToLower() == "post";
            if (isPost && ModelState.Values.Any(x => x.Errors.Any())) {

            }

            var actionDescriptor = filterContext.ActionDescriptor.GetParameters();
            var actionParameterModel = actionDescriptor.FirstOrDefault(x => typeof(ITracingFieldsModel).IsAssignableFrom(x.ParameterType));
            if (isPost && actionParameterModel != null)
            {
                var tracingFields = (ITracingFieldsModel)filterContext.ActionParameters[actionParameterModel.ParameterName];
                var entity = (IEntity)filterContext.ActionParameters[actionParameterModel.ParameterName];
                if (entity.Id == 0) {
                    tracingFields.UserType = UserTypes.Dashboard;
                    tracingFields.CreatedBy = UserId;
                } else {
                    tracingFields.UserType = UserTypes.Dashboard;
                    tracingFields.ModifiedBy = UserId;
                }
            }

            base.OnActionExecuting(filterContext);
        }

        protected override void OnActionExecuted(ActionExecutedContext filterContext) {
            var isPost = filterContext.RequestContext.HttpContext.Request.HttpMethod.ToLower() == "post";
            AddErrorToViewData(filterContext);
            if (isPost && ModelState.Values.Any(x => x.Errors.Any()))
            {
                foreach (var modelState in ModelState)
                {
                    if (modelState.Value.Errors.Any())
                        ViewData.Add(modelState.Key, modelState.Value.Errors[0].ErrorMessage);
                }
            }

            var viewResultBase = filterContext.Result as ViewResultBase;

            if(viewResultBase != null && filterContext.RequestContext.HttpContext.Request.HttpMethod.ToLower() != "post") {
                var customRoute = viewResultBase.Model as CustomRoute;
                if(customRoute != null) {
                    var actionName = filterContext.ActionDescriptor.ActionName.ToLower();
                    if(actionName == ActionTypes.Create.ToString().ToLower()) {
                        customRoute.Url = "/";
                        customRoute.HttpStatusCode = HttpStatusCode.OK;
                        customRoute.IsAutoGenerated = true;
                    }else if(actionName == ActionTypes.Update.ToString().ToLower()) {
                        var customRouteService = DependencyResolver.Current.GetService<ICustomRouteService>();
                        var currentCustomRoute = customRouteService
                            .GetCustomRoute(customRoute.PredefinedPage, customRoute.Id);

                        customRoute.ContentId = currentCustomRoute.Id;
                        customRoute.IsAutoGenerated = currentCustomRoute.IsAutoGenerated;
                        customRoute.SeoTitle = currentCustomRoute.SeoTitle;
                        customRoute.MetaDescription = currentCustomRoute.MetaDescription;
                        customRoute.MetaKeyword = currentCustomRoute.MetaKeyword;
                        customRoute.Url = currentCustomRoute.Url;
                    }
                }
            }

            base.OnActionExecuted(filterContext);
        }

        protected void CreateNotification(ActionResultType resultType) {
            switch (resultType) {
                case ActionResultType.Success:
                    TempData[resultType.ToString()] = "İşleminiz başarıyla gerçekleşti!";
                    break;
                case ActionResultType.Failure:
                    TempData[resultType.ToString()] = "İşleminiz gerçekleştirilirken bir hata oluştu";
                    break;
            }            
        }

        protected void CreateNotification(ActionResultType resultType, string message) {
            TempData[resultType.ToString()] = message;
        }

        private void AddErrorToViewData(ActionExecutedContext filterContext) {
            if (filterContext.RequestContext.HttpContext.Request.HttpMethod.ToLower() != "post")
                return;

            if (!ModelState.Values.Any(x => x.Errors.Any()))
                return;

            ViewData.Add(ActionResultType.Failure.ToString(), "Beklenmedik bir hata oluştu");
        }

        public int UserId {
            get {
                var userIdString = User.Identity.GetUserId();
                if (string.IsNullOrEmpty(userIdString))
                    return 0;
                return Int32.Parse(userIdString);
            }
        }
    }

}